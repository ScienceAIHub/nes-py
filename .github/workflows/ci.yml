name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsdl1.2-dev \
          libsdl-image1.2-dev \
          libsdl-mixer1.2-dev \
          libsdl-ttf2.0-dev \
          libsmpeg-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libtiff5-dev \
          libx11-6 \
          libx11-dev \
          fluid-soundfont-gm \
          timgm6mb-soundfont \
          xfonts-base \
          xfonts-100dpi \
          xfonts-75dpi \
          xfonts-cyrillic \
          fontconfig \
          fonts-freefont-ttf \
          libfreetype6-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install scons wheel setuptools numpy>=1.21.0

    - name: Install package dependencies
      run: |
        pip install -r requirements.txt

    - name: Build extension
      run: |
        python setup.py build_ext --inplace

    - name: Install package
      run: |
        pip install -e .

    - name: Test basic imports
      run: |
        python -c "import nes_py; print(f'nes-py version: {nes_py.__version__}')"
        python -c "from nes_py import NESEnv; print('NESEnv imported successfully')"

    - name: Run unit tests
      run: |
        python -m pytest nes_py/tests/ -v --tb=short

    - name: Run validation tests
      run: |
        python test_numpy_fix.py
        python final_validation.py

    - name: Test ROM loading (if test ROMs available)
      run: |
        python -c "
        import os
        if os.path.exists('nes_py/tests/games/'):
          from nes_py._rom import ROM
          import glob
          roms = glob.glob('nes_py/tests/games/*.nes')
          if roms:
            rom = ROM(roms[0])
            print(f'Successfully loaded ROM: {roms[0]}')
            print(f'PRG ROM size: {rom.prg_rom_size} KB')
            print(f'CHR ROM size: {rom.chr_rom_size} KB')
          else:
            print('No test ROMs found, skipping ROM test')
        else:
          print('No test games directory found, skipping ROM test')
        "
