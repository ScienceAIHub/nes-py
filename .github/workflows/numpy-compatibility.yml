name: NumPy Compatibility Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  numpy-compatibility:
    name: Test NumPy ${{ matrix.numpy-version }} on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        numpy-version: ["1.21.0", "1.24.0", "1.26.0", "2.0.0", "2.1.0"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsdl1.2-dev \
          libsdl-image1.2-dev \
          libsdl-mixer1.2-dev \
          libsdl-ttf2.0-dev \
          libsmpeg-dev \
          libportmidi-dev \
          libavformat-dev \
          libavcodec-dev \
          libswscale-dev \
          libtiff5-dev \
          libfreetype6-dev

    - name: Install specific NumPy version
      run: |
        python -m pip install --upgrade pip
        pip install numpy==${{ matrix.numpy-version }}
        pip install scons wheel setuptools

    - name: Install other dependencies
      run: |
        pip install gymnasium>=0.28.0 pyglet>=1.5.21 tqdm>=4.67.1 pytest>=7.0.0

    - name: Build and install package
      run: |
        python setup.py build_ext --inplace
        pip install -e .

    - name: Test NumPy compatibility
      run: |
        python test_numpy_fix.py

    - name: Run ROM tests specifically
      run: |
        python -m pytest nes_py/tests/test_rom.py -v

    - name: Test edge cases
      run: |
        python -c "
        import numpy as np
        from nes_py._rom import ROM
        print(f'Testing with NumPy {np.__version__}')
        
        # Test with maximum header values to ensure no overflow
        test_data = np.zeros(16 + 32*1024 + 8*1024, dtype=np.uint8)
        test_data[0:4] = [0x4E, 0x45, 0x53, 0x1A]  # NES magic
        test_data[4] = 255  # Max PRG ROM size
        test_data[5] = 255  # Max CHR ROM size
        
        # Save test ROM
        test_data.tofile('test_max.nes')
        
        try:
          rom = ROM('test_max.nes')
          print(f'Max PRG ROM size: {rom.prg_rom_size} KB')
          print(f'Max CHR ROM size: {rom.chr_rom_size} KB')
          print(f'PRG ROM stop: {rom.prg_rom_stop}')
          print(f'CHR ROM stop: {rom.chr_rom_stop}')
          print('✅ No overflow with maximum values!')
        except Exception as e:
          print(f'❌ Error with maximum values: {e}')
          exit(1)
        finally:
          import os
          if os.path.exists('test_max.nes'):
            os.remove('test_max.nes')
        "
