name: Build and publish wheels

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: cp311-* cp312-*
          CIBW_SKIP: "*-win32 *-manylinux_i686"
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_BEFORE_BUILD_LINUX: |
            yum install -y SDL-devel SDL_image-devel SDL_mixer-devel SDL_ttf-devel smpeg-devel portmidi-devel libavformat-devel libavcodec-devel libswscale-devel libtiff-devel freetype-devel || \
            apt-get update && apt-get install -y libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev libportmidi-dev libavformat-dev libavcodec-dev libswscale-dev libtiff5-dev libfreetype6-dev || \
            apk add sdl-dev sdl_image-dev sdl_mixer-dev sdl_ttf-dev smpeg-dev portmidi-dev ffmpeg-dev tiff-dev freetype-dev
            pip install scons numpy>=1.21.0
          CIBW_BEFORE_BUILD: pip install scons numpy>=1.21.0
          CIBW_TEST_COMMAND: python -c "import nes_py; print('Import successful'); from nes_py import NESEnv; print('NESEnv import successful')"

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build scons

      - name: Build sdist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.tar.gz

  publish:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
